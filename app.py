from flask import Flask, render_template, request, jsonify, flash, redirect, url_for
from werkzeug.utils import secure_filename
import os
import json
from datetime import datetime
from pathlib import Path
from models import SSHServer, db
from ssh_manager import SSHManager
from utils import parse_ssh_file, get_server_geo
from context_utils import init_context_utils, task_manager, with_app_context
import threading
import time

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
basedir = Path(__file__).parent.absolute()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-key-change-me-in-production')

# –°–æ–∑–¥–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
db_dir = basedir / 'database'
db_dir.mkdir(exist_ok=True)
db_path = db_dir / 'ssh_servers_dev.db'
app.config['SQLALCHEMY_DATABASE_URI'] = f'sqlite:///{db_path}'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
upload_dir = basedir / 'uploads'
upload_dir.mkdir(exist_ok=True)
app.config['UPLOAD_FOLDER'] = str(upload_dir)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
logs_dir = basedir / 'logs'
logs_dir.mkdir(exist_ok=True)

print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
print(f"üìÅ –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫: {upload_dir}")

db.init_app(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
init_context_utils(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
validation_status = {
    'running': False, 
    'progress': 0, 
    'total': 0, 
    'results': [], 
    'threads': 10,
    'timeout': 15,
    'start_time': None,
    'estimated_time': None
}
command_status = {
    'running': False, 
    'progress': 0, 
    'total': 0, 
    'results': [], 
    'threads': 10,
    'timeout': 15,
    'start_time': None,
    'estimated_time': None
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SSH Manager —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
ssh_manager = SSHManager(max_workers=10, timeout=15)

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–±–∑–æ—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    servers = SSHServer.query.all()
    stats = {
        'total': len(servers),
        'valid': len([s for s in servers if s.is_valid]),
        'invalid': len([s for s in servers if not s.is_valid]),
        'unchecked': len([s for s in servers if s.is_valid is None])
    }
    return render_template('index.html', servers=servers, stats=stats)

@app.route('/servers')
def servers():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    page = request.args.get('page', 1, type=int)
    per_page = request.args.get('per_page', 50, type=int)
    
    # –§–∏–ª—å—Ç—Ä—ã
    status_filter = request.args.get('status', 'all')
    country_filter = request.args.get('country', 'all')
    os_filter = request.args.get('os', 'all')
    search = request.args.get('search', '')
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    sort_by = request.args.get('sort', 'host')
    sort_order = request.args.get('order', 'asc')
    
    query = SSHServer.query
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if status_filter == 'valid':
        query = query.filter(SSHServer.is_valid == True)
    elif status_filter == 'invalid':
        query = query.filter(SSHServer.is_valid == False)
    elif status_filter == 'unchecked':
        query = query.filter(SSHServer.is_valid == None)
    
    if country_filter != 'all':
        query = query.filter(SSHServer.country == country_filter)
    
    if os_filter != 'all':
        query = query.filter(SSHServer.os_info.contains(os_filter))
    
    if search:
        query = query.filter(SSHServer.host.contains(search))
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    sort_column = getattr(SSHServer, sort_by, SSHServer.host)
    if sort_order == 'desc':
        query = query.order_by(sort_column.desc())
    else:
        query = query.order_by(sort_column.asc())
    
    servers = query.paginate(
        page=page, per_page=per_page, error_out=False
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    countries = db.session.query(SSHServer.country).distinct().all()
    countries = [c[0] for c in countries if c[0]]
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –û–°
    os_systems = db.session.query(SSHServer.os_info).filter(SSHServer.os_info.isnot(None)).distinct().all()
    os_list = []
    for os_info in os_systems:
        if os_info[0]:
            os_lower = os_info[0].lower()
            if 'ubuntu' in os_lower and 'Ubuntu' not in os_list:
                os_list.append('Ubuntu')
            elif 'debian' in os_lower and 'Debian' not in os_list:
                os_list.append('Debian')
            elif 'centos' in os_lower and 'CentOS' not in os_list:
                os_list.append('CentOS')
            elif 'red hat' in os_lower and 'RHEL' not in os_list:
                os_list.append('RHEL')
            elif 'fedora' in os_lower and 'Fedora' not in os_list:
                os_list.append('Fedora')
    
    return render_template('servers.html', 
                         servers=servers, 
                         countries=countries,
                         os_list=os_list,
                         current_status=status_filter,
                         current_country=country_filter,
                         current_os=os_filter,
                         current_search=search,
                         current_sort=sort_by,
                         current_order=sort_order)

@app.route('/map')
def map_view():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–∞—Ä—Ç–æ–π —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    servers = SSHServer.query.filter(
        SSHServer.latitude.isnot(None),
        SSHServer.longitude.isnot(None)
    ).all()
    
    servers_data = []
    for server in servers:
        servers_data.append({
            'id': server.id,
            'host': server.host,
            'port': server.port,
            'country': server.country,
            'city': server.city,
            'latitude': server.latitude,
            'longitude': server.longitude,
            'is_valid': server.is_valid,
            'last_check': server.last_check.isoformat() if server.last_check else None
        })
    
    return render_template('map.html', servers=servers_data)

@app.route('/upload', methods=['GET', 'POST'])
def upload_servers():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    if request.method == 'POST':
        if 'file' not in request.files:
            flash('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', 'error')
            return redirect(request.url)
        
        file = request.files['file']
        if file.filename == '':
            flash('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', 'error')
            return redirect(request.url)
        
        if file:
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(filepath)
            
            try:
                servers_data = parse_ssh_file(filepath)
                added_count = 0
                
                for server_data in servers_data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–µ—Ä–≤–µ—Ä
                    existing = SSHServer.query.filter_by(
                        host=server_data['host'],
                        port=server_data['port'],
                        username=server_data['username']
                    ).first()
                    
                    if not existing:
                        server = SSHServer(**server_data)
                        # –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–¥–∞–Ω–Ω—ã–µ
                        try:
                            geo_data = get_server_geo(server_data['host'])
                            if geo_data:
                                server.country = geo_data.get('country')
                                server.city = geo_data.get('city')
                                server.latitude = geo_data.get('latitude')
                                server.longitude = geo_data.get('longitude')
                        except Exception as geo_error:
                            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö –¥–ª—è {server_data['host']}: {geo_error}")
                            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö
                        
                        db.session.add(server)
                        added_count += 1
                
                db.session.commit()
                flash(f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —Å–µ—Ä–≤–µ—Ä–æ–≤', 'success')
                
            except Exception as e:
                flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}', 'error')
                db.session.rollback()
            
            finally:
                if os.path.exists(filepath):
                    os.remove(filepath)
    
    return render_template('upload.html')

@app.route('/validate', methods=['POST'])
def validate_servers():
    """–ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ—Ç–æ–∫–æ–≤"""
    global validation_status, ssh_manager
    
    if validation_status['running']:
        return jsonify({'error': '–í–∞–ª–∏–¥–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞'})
    
    data = request.json or {}
    server_ids = data.get('server_ids', [])
    threads = int(data.get('threads', 10))
    timeout = int(data.get('timeout', 15))
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    threads = max(1, min(threads, 100))  # –û—Ç 1 –¥–æ 100 –ø–æ—Ç–æ–∫–æ–≤
    timeout = max(5, min(timeout, 60))   # –û—Ç 5 –¥–æ 60 —Å–µ–∫—É–Ω–¥
    
    if not server_ids:
        servers = SSHServer.query.all()
        server_ids = [s.id for s in servers]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º SSH Manager —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    ssh_manager = SSHManager(max_workers=threads, timeout=timeout)
    
    validation_status = {
        'running': True,
        'progress': 0,
        'total': len(server_ids),
        'results': [],
        'threads': threads,
        'timeout': timeout,
        'start_time': datetime.now(),
        'estimated_time': None
    }
    
    def validate_thread():
        global validation_status
        
        # –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        with app.app_context():
            try:
                processed = 0
                start_time = time.time()
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                batch_servers = []
                for server_id in server_ids:
                    try:
                        server = SSHServer.query.get(server_id)
                        if server:
                            batch_servers.append((
                                server_id,
                                server.host,
                                server.port,
                                server.username,
                                server.password
                            ))
                    except Exception as db_error:
                        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ {server_id} –∏–∑ –ë–î: {db_error}")
                        continue
                
                if not batch_servers:
                    validation_status['running'] = False
                    print("–ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
                    return
                
                validation_status['total'] = len(batch_servers)
                
                # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                def update_callback(result):
                    nonlocal processed
                    
                    # –í–ê–ñ–ù–û: –†–∞–±–æ—Ç–∞–µ–º –≤ —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    try:
                        processed += 1
                        validation_status['progress'] = processed
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏
                        elapsed = time.time() - start_time
                        if processed > 0:
                            time_per_server = elapsed / processed
                            remaining = validation_status['total'] - processed
                            validation_status['estimated_time'] = remaining * time_per_server
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ
                        try:
                            server = SSHServer.query.get(result['server_id'])
                            if server:
                                server.is_valid = result['is_valid']
                                server.last_check = datetime.utcnow()
                                server.last_error = result['error'] if not result['is_valid'] else None
                                
                                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë
                                if result.get('sys_info_collected') and result.get('sys_info'):
                                    sys_info = result['sys_info']
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                                    server.os_info = sys_info.get('os')
                                    server.cpu_info = sys_info.get('cpu')
                                    server.memory_info = sys_info.get('memory')
                                    server.disk_info = sys_info.get('disk')
                                    server.kernel_version = sys_info.get('kernel')
                                    server.architecture = sys_info.get('architecture')
                                    server.uptime_info = sys_info.get('uptime')
                                    server.total_memory_mb = sys_info.get('total_memory_mb')
                                    server.used_memory_mb = sys_info.get('used_memory_mb')
                                    server.disk_usage_percent = sys_info.get('disk_usage_percent')
                                    server.cpu_cores = sys_info.get('cpu_cores')
                                
                                db.session.commit()
                                
                        except Exception as db_error:
                            db.session.rollback()
                            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –¥–ª—è {result.get('host', 'unknown')}: {db_error}")
                        
                        validation_status['results'].append(result)
                        
                    except Exception as callback_error:
                        print(f"–û—à–∏–±–∫–∞ –≤ callback: {callback_error}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –±–∞—Ç—á–∞
                try:
                    ssh_manager.validate_servers_batch(batch_servers, update_callback)
                except Exception as batch_error:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞: {batch_error}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                    for server_data in batch_servers:
                        if not validation_status['running']:
                            break
                        try:
                            server_id, host, port, username, password = server_data
                            is_valid, error = ssh_manager.test_connection(host, port, username, password)
                            update_callback({
                                'server_id': server_id,
                                'host': host,
                                'is_valid': is_valid,
                                'error': error,
                                'sys_info_collected': False
                            })
                        except Exception as single_error:
                            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_data[0]}: {single_error}")
                
            except Exception as thread_error:
                print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {thread_error}")
            finally:
                validation_status['running'] = False
                validation_status['estimated_time'] = 0
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    thread = threading.Thread(target=validate_thread)
    thread.daemon = True
    thread.start()
    
    return jsonify({'success': True})

@app.route('/validation_status')
def validation_status_endpoint():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    status_copy = validation_status.copy()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if status_copy['start_time']:
        elapsed = (datetime.now() - status_copy['start_time']).total_seconds()
        status_copy['elapsed_time'] = elapsed
        
        if status_copy['progress'] > 0:
            time_per_server = elapsed / status_copy['progress']
            status_copy['servers_per_second'] = round(status_copy['progress'] / elapsed, 2) if elapsed > 0 else 0
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON
    if status_copy.get('start_time'):
        status_copy['start_time'] = status_copy['start_time'].isoformat()
    
    return jsonify(status_copy)

@app.route('/execute_command', methods=['POST'])
def execute_command():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö"""
    global command_status, ssh_manager
    
    if command_status['running']:
        return jsonify({'error': '–ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'})
    
    data = request.json
    command = data.get('command', '').strip()
    server_ids = data.get('server_ids', [])
    threads = int(data.get('threads', 10))
    timeout = int(data.get('timeout', 15))
    
    if not command:
        return jsonify({'error': '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'})
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    threads = max(1, min(threads, 50))  # –û—Ç 1 –¥–æ 50 –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥
    timeout = max(5, min(timeout, 60))   # –û—Ç 5 –¥–æ 60 —Å–µ–∫—É–Ω–¥
    
    if not server_ids:
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –≤–∞–ª–∏–¥–Ω—ã–µ
        servers = SSHServer.query.filter(SSHServer.is_valid == True).all()
        server_ids = [s.id for s in servers]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º SSH Manager —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    ssh_manager = SSHManager(max_workers=threads, timeout=timeout)
    
    command_status = {
        'running': True,
        'progress': 0,
        'total': len(server_ids),
        'results': [],
        'threads': threads,
        'timeout': timeout,
        'start_time': datetime.now(),
        'estimated_time': None
    }
    
    def execute_thread():
        global command_status
        
        # –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        with app.app_context():
            try:
                processed = 0
                start_time = time.time()
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
                servers_data = []
                for server_id in server_ids:
                    try:
                        server = SSHServer.query.get(server_id)
                        if server and server.is_valid:
                            servers_data.append((
                                server_id,
                                server.host,
                                server.port,
                                server.username,
                                server.password
                            ))
                    except Exception as db_error:
                        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ {server_id} –∏–∑ –ë–î: {db_error}")
                        continue
                
                if not servers_data:
                    command_status['running'] = False
                    print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
                    return
                
                command_status['total'] = len(servers_data)
                
                def update_callback(result):
                    nonlocal processed
                    processed += 1
                    command_status['progress'] = processed
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏
                    elapsed = time.time() - start_time
                    if processed > 0:
                        time_per_server = elapsed / processed
                        remaining = command_status['total'] - processed
                        command_status['estimated_time'] = remaining * time_per_server
                    
                    command_status['results'].append(result)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                try:
                    ssh_manager.execute_commands_batch(servers_data, command, update_callback)
                except Exception as exec_error:
                    print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥: {exec_error}")
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ–¥–Ω–æ–π –µ—Å–ª–∏ –±–∞—Ç—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                    for server_data in servers_data:
                        if not command_status['running']:
                            break
                        try:
                            server_id, host, port, username, password = server_data
                            output, error = ssh_manager.execute_command(host, port, username, password, command)
                            update_callback({
                                'server_id': server_id,
                                'host': host,
                                'output': output,
                                'error': error,
                                'success': error is None,
                                'processing_time': time.time() - start_time
                            })
                        except Exception as single_error:
                            print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_data[1]}: {single_error}")
                
            except Exception as thread_error:
                print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥: {thread_error}")
            finally:
                command_status['running'] = False
                command_status['estimated_time'] = 0
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
    thread = threading.Thread(target=execute_thread)
    thread.daemon = True
    thread.start()
    
    return jsonify({'success': True})

@app.route('/command_status')
def command_status_endpoint():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
    status_copy = command_status.copy()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if status_copy['start_time']:
        elapsed = (datetime.now() - status_copy['start_time']).total_seconds()
        status_copy['elapsed_time'] = elapsed
        
        if status_copy['progress'] > 0:
            status_copy['servers_per_second'] = round(status_copy['progress'] / elapsed, 2) if elapsed > 0 else 0
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON
    if status_copy.get('start_time'):
        status_copy['start_time'] = status_copy['start_time'].isoformat()
    
    return jsonify(status_copy)

@app.route('/update_system_info', methods=['POST'])
def update_system_info():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    global command_status, ssh_manager
    
    if command_status['running']:
        return jsonify({'error': '–£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è'})
    
    data = request.json or {}
    server_ids = data.get('server_ids', [])
    threads = int(data.get('threads', 10))
    timeout = int(data.get('timeout', 20))
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    threads = max(1, min(threads, 50))
    timeout = max(10, min(timeout, 60))
    
    if not server_ids:
        servers = SSHServer.query.filter(SSHServer.is_valid == True).all()
        server_ids = [s.id for s in servers]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º SSH Manager
    ssh_manager = SSHManager(max_workers=threads, timeout=timeout)
    
    command_status = {
        'running': True,
        'progress': 0,
        'total': len(server_ids),
        'results': [],
        'threads': threads,
        'timeout': timeout,
        'start_time': datetime.now(),
        'estimated_time': None
    }
    
    def system_info_thread():
        global command_status
        
        # –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        with app.app_context():
            try:
                processed = 0
                start_time = time.time()
                
                for i, server_id in enumerate(server_ids):
                    if not command_status['running']:
                        break
                    
                    try:
                        server = SSHServer.query.get(server_id)
                        if server and server.is_valid:
                            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è {server.host}...")
                            
                            try:
                                sys_info = ssh_manager.get_system_info(
                                    server.host, server.port, server.username, server.password
                                )
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                                if 'error' not in sys_info:
                                    server.os_info = sys_info.get('os')
                                    server.cpu_info = sys_info.get('cpu')
                                    server.memory_info = sys_info.get('memory')
                                    server.disk_info = sys_info.get('disk')
                                    server.kernel_version = sys_info.get('kernel')
                                    server.architecture = sys_info.get('architecture')
                                    server.uptime_info = sys_info.get('uptime')
                                    server.total_memory_mb = sys_info.get('total_memory_mb')
                                    server.used_memory_mb = sys_info.get('used_memory_mb')
                                    server.disk_usage_percent = sys_info.get('disk_usage_percent')
                                    server.cpu_cores = sys_info.get('cpu_cores')
                                    
                                    command_status['results'].append({
                                        'server_id': server_id,
                                        'host': server.host,
                                        'success': True,
                                        'message': '–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
                                    })
                                else:
                                    command_status['results'].append({
                                        'server_id': server_id,
                                        'host': server.host,
                                        'success': False,
                                        'message': sys_info.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                                    })
                                
                                try:
                                    db.session.commit()
                                    print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {server.host}")
                                except Exception as commit_error:
                                    db.session.rollback()
                                    print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è {server.host}: {commit_error}")
                                    command_status['results'].append({
                                        'server_id': server_id,
                                        'host': server.host,
                                        'success': False,
                                        'message': f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {commit_error}'
                                    })
                            
                            except Exception as sys_error:
                                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è {server.host}: {sys_error}")
                                command_status['results'].append({
                                    'server_id': server_id,
                                    'host': server.host,
                                    'success': False,
                                    'message': str(sys_error)
                                })
                        else:
                            command_status['results'].append({
                                'server_id': server_id,
                                'host': f'server_{server_id}',
                                'success': False,
                                'message': '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'
                            })
                    
                    except Exception as server_error:
                        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_id}: {server_error}")
                        command_status['results'].append({
                            'server_id': server_id,
                            'host': f'server_{server_id}',
                            'success': False,
                            'message': str(server_error)
                        })
                    
                    processed += 1
                    command_status['progress'] = processed
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏
                    elapsed = time.time() - start_time
                    if processed > 0:
                        time_per_server = elapsed / processed
                        remaining = command_status['total'] - processed
                        command_status['estimated_time'] = remaining * time_per_server
                
            except Exception as thread_error:
                print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {thread_error}")
            finally:
                command_status['running'] = False
                command_status['estimated_time'] = 0
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    thread = threading.Thread(target=system_info_thread)
    thread.daemon = True
    thread.start()
    
    return jsonify({'success': True})

@app.route('/clear_errors', methods=['POST'])
def clear_errors():
    """–û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    data = request.json or {}
    action = data.get('action', 'clear_all')
    
    try:
        if action == 'clear_all':
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            servers = SSHServer.query.all()
            for server in servers:
                server.is_valid = None
                server.last_error = None
                server.last_check = None
            
            db.session.commit()
            return jsonify({
                'success': True, 
                'message': f'–û—á–∏—â–µ–Ω—ã –æ—à–∏–±–∫–∏ –¥–ª—è {len(servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤'
            })
            
        elif action == 'clear_server':
            # –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            server_id = data.get('server_id')
            if not server_id:
                return jsonify({'success': False, 'error': '–ù–µ —É–∫–∞–∑–∞–Ω ID —Å–µ—Ä–≤–µ—Ä–∞'})
            
            server = SSHServer.query.get(server_id)
            if not server:
                return jsonify({'success': False, 'error': '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'})
            
            server.is_valid = None
            server.last_error = None
            server.last_check = None
            
            db.session.commit()
            return jsonify({
                'success': True, 
                'message': f'–û—á–∏—â–µ–Ω—ã –æ—à–∏–±–∫–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server.host}'
            })
            
        elif action == 'clear_invalid':
            # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
            servers = SSHServer.query.filter(SSHServer.is_valid == False).all()
            for server in servers:
                server.is_valid = None
                server.last_error = None
                server.last_check = None
            
            db.session.commit()
            return jsonify({
                'success': True, 
                'message': f'–û—á–∏—â–µ–Ω—ã –æ—à–∏–±–∫–∏ –¥–ª—è {len(servers)} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤'
            })
            
        else:
            return jsonify({'success': False, 'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'})
            
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'error': str(e)})

@app.route('/stop_operation', methods=['POST'])
def stop_operation():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    global validation_status, command_status
    
    operation = request.json.get('operation')
    
    if operation == 'validation':
        validation_status['running'] = False
    elif operation == 'command':
        command_status['running'] = False
    
    return jsonify({'success': True})

@app.route('/server/<int:server_id>')
def server_detail(server_id):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ"""
    server = SSHServer.query.get_or_404(server_id)
    return render_template('server_detail.html', server=server)

@app.route('/delete_server/<int:server_id>', methods=['POST'])
def delete_server(server_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    server = SSHServer.query.get_or_404(server_id)
    db.session.delete(server)
    db.session.commit()
    flash('–°–µ—Ä–≤–µ—Ä —É–¥–∞–ª–µ–Ω', 'success')
    return redirect(url_for('servers'))

@app.route('/api/servers')
def api_servers():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    servers = SSHServer.query.all()
    return jsonify([{
        'id': s.id,
        'host': s.host,
        'port': s.port,
        'username': s.username,
        'country': s.country,
        'city': s.city,
        'is_valid': s.is_valid,
        'last_check': s.last_check.isoformat() if s.last_check else None
    } for s in servers])

@app.route('/settings', methods=['GET', 'POST'])
def settings():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if request.method == 'POST':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        data = request.json
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        return jsonify({'success': True})
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    current_settings = {
        'default_threads': 10,
        'default_timeout': 15,
        'max_threads': 100,
        'max_timeout': 60
    }
    
    return render_template('settings.html', settings=current_settings)

@app.route('/errors')
def error_monitoring():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    error_servers = SSHServer.query.filter(SSHServer.is_valid == False).all()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º
    error_types = {}
    for server in error_servers:
        if server.last_error:
            error_type = classify_error(server.last_error)
            error_types[error_type] = error_types.get(error_type, 0) + 1
    
    return render_template('error_monitoring.html', 
                         error_servers=error_servers,
                         error_types=error_types)

def classify_error(error_message):
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º"""
    error_msg = error_message.lower()
    
    if 'banner' in error_msg or 'protocol' in error_msg:
        return 'SSH Banner'
    elif 'timeout' in error_msg or 'timed out' in error_msg:
        return 'Timeout'
    elif 'authentication' in error_msg or 'auth' in error_msg:
        return 'Authentication'
    elif 'connection refused' in error_msg or 'network' in error_msg:
        return 'Network'
    elif 'permission' in error_msg or 'denied' in error_msg:
        return 'Permission'
    else:
        return 'Other'

@app.route('/api/error_stats')
def api_error_stats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
    error_servers = SSHServer.query.filter(SSHServer.is_valid == False).all()
    
    stats = {
        'total_errors': len(error_servers),
        'error_types': {},
        'problematic_servers': []
    }
    
    for server in error_servers:
        if server.last_error:
            error_type = classify_error(server.last_error)
            stats['error_types'][error_type] = stats['error_types'].get(error_type, 0) + 1
            
            stats['problematic_servers'].append({
                'host': server.host,
                'port': server.port,
                'error': server.last_error,
                'last_check': server.last_check.isoformat() if server.last_check else None
            })
    
    return jsonify(stats)

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    print("üöÄ SSH Manager –∑–∞–ø—É—â–µ–Ω!")
    print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://127.0.0.1:5000")
    app.run(debug=True, host='127.0.0.1', port=5000)