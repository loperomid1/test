#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SSH Manager
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π SQLAlchemy
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
sys.path.insert(0, str(Path(__file__).parent))

from app import app, db
from models import SSHServer

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SSH Manager...")
    
    with app.app_context():
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            db.create_all()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            try:
                from sqlalchemy import inspect
                inspector = inspect(db.engine)
                tables = inspector.get_table_names()
                if tables:
                    print(f"üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")
                else:
                    print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª–∏...")
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª–∏
                    SSHServer.query.count()  # –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    print("üìã –¢–∞–±–ª–∏—Ü–∞ ssh_servers —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            except Exception as table_error:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü: {table_error}")
                print("‚úÖ –ù–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª–∏)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤
            try:
                server_count = SSHServer.query.count()
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –±–∞–∑–µ: {server_count}")
            except Exception as count_error:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—ã: {count_error}")
                print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã, –Ω–æ –ø–æ–∫–∞ –ø—É—Å—Ç—ã–µ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    return True

def create_sample_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    
    sample_servers = [
        {
            'host': '192.168.1.100',
            'port': 22,
            'username': 'admin',
            'password': 'test123',
            'country': '–†–æ—Å—Å–∏—è',
            'city': '–ú–æ—Å–∫–≤–∞',
            'notes': '–¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏'
        },
        {
            'host': 'test.example.com',
            'port': 2222,
            'username': 'root',
            'password': 'secret',
            'country': '–°–®–ê',
            'city': '–ù—å—é-–ô–æ—Ä–∫',
            'notes': '–î–µ–º–æ —Å–µ—Ä–≤–µ—Ä —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø–æ—Ä—Ç–æ–º'
        },
        {
            'host': '10.0.0.50',
            'port': 22,
            'username': 'ubuntu',
            'password': 'ubuntu123',
            'country': '–ì–µ—Ä–º–∞–Ω–∏—è',
            'city': '–ë–µ—Ä–ª–∏–Ω',
            'notes': 'Ubuntu —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        },
        {
            'host': '203.0.113.10',
            'port': 22,
            'username': 'centos',
            'password': 'centos2023',
            'country': '–Ø–ø–æ–Ω–∏—è',
            'city': '–¢–æ–∫–∏–æ',
            'notes': 'CentOS —Å–µ—Ä–≤–µ—Ä –≤ –ê–∑–∏–∏'
        },
        {
            'host': 'demo.server.local',
            'port': 22,
            'username': 'user',
            'password': 'password123',
            'country': '–§—Ä–∞–Ω—Ü–∏—è',
            'city': '–ü–∞—Ä–∏–∂',
            'notes': '–õ–æ–∫–∞–ª—å–Ω—ã–π –¥–µ–º–æ —Å–µ—Ä–≤–µ—Ä'
        }
    ]
    
    with app.app_context():
        try:
            added_count = 0
            for server_data in sample_servers:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–µ—Ä–≤–µ—Ä
                existing = SSHServer.query.filter_by(
                    host=server_data['host'],
                    username=server_data['username']
                ).first()
                
                if not existing:
                    server = SSHServer(**server_data)
                    db.session.add(server)
                    added_count += 1
                else:
                    print(f"‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä {server_data['host']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            if added_count > 0:
                db.session.commit()
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤")
            else:
                print("‚ÑπÔ∏è  –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã —Å–µ—Ä–≤–µ—Ä–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
            db.session.rollback()

def reset_database():
    """–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö)"""
    print("\nüóëÔ∏è  –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    with app.app_context():
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            db.drop_all()
            print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
            db.create_all()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∑–∞–Ω–æ–≤–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    return True

def backup_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è SQLite)"""
    print("\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
    
    db_uri = app.config.get('SQLALCHEMY_DATABASE_URI', '')
    
    if 'sqlite' in db_uri:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_path = db_uri.replace('sqlite:///', '')
        
        if os.path.exists(db_path):
            import shutil
            from datetime import datetime
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            backup_path = f"{db_path}.backup_{timestamp}"
            
            try:
                shutil.copy2(db_path, backup_path)
                print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                size = os.path.getsize(backup_path)
                print(f"üìä –†–∞–∑–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {format_bytes(size)}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        else:
            print("‚ö†Ô∏è  –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ö†Ô∏è  –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è SQLite")
        print("üí° –î–ª—è PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pg_dump")
        print("üí° –î–ª—è MySQL –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: mysqldump")

def show_db_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"üîó URI: {app.config.get('SQLALCHEMY_DATABASE_URI')}")
    
    with app.app_context():
        try:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö
            total_servers = SSHServer.query.count()
            valid_servers = SSHServer.query.filter(SSHServer.is_valid == True).count()
            invalid_servers = SSHServer.query.filter(SSHServer.is_valid == False).count()
            unchecked_servers = SSHServer.query.filter(SSHServer.is_valid.is_(None)).count()
            
            print(f"üìà –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {total_servers}")
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö: {valid_servers}")
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {invalid_servers}")
            print(f"‚ùì –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö: {unchecked_servers}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
            countries = db.session.query(SSHServer.country, db.func.count(SSHServer.id))\
                .group_by(SSHServer.country)\
                .filter(SSHServer.country.isnot(None))\
                .all()
            
            if countries:
                print("\nüåç –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º:")
                for country, count in countries:
                    print(f"   {country}: {count}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è SQLite)
            db_uri = app.config.get('SQLALCHEMY_DATABASE_URI', '')
            if 'sqlite' in db_uri:
                db_path = db_uri.replace('sqlite:///', '')
                if os.path.exists(db_path):
                    size = os.path.getsize(db_path)
                    print(f"\nüíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {format_bytes(size)}")
                    
                    # –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
                    backup_files = [f for f in os.listdir(os.path.dirname(db_path)) 
                                  if f.startswith(os.path.basename(db_path) + '.backup_')]
                    if backup_files:
                        print(f"üì¶ –†–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(backup_files)}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

def format_bytes(bytes_value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if bytes_value == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB", "TB"]
    i = 0
    while bytes_value >= 1024 and i < len(size_names)-1:
        bytes_value /= 1024.0
        i += 1
    
    return f"{bytes_value:.1f} {size_names[i]}"

def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    with app.app_context():
        try:
            # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            result = db.session.execute(db.text('SELECT 1')).scalar()
            if result == 1:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
                try:
                    SSHServer.query.count()
                    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ ssh_servers –¥–æ—Å—Ç—É–ø–Ω–∞")
                except Exception as table_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ: {table_error}")
                    return False
                
            else:
                print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –º–µ–Ω—é"""
    print("=" * 50)
    print("üöÄ SSH Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == 'init':
            init_database()
        elif command == 'reset':
            if input("‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? (yes/no): ").lower() == 'yes':
                reset_database()
            else:
                print("‚ùå –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
        elif command == 'sample':
            create_sample_data()
        elif command == 'backup':
            backup_database()
        elif command == 'info':
            show_db_info()
        elif command == 'test':
            test_database_connection()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            print_help()
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
        while True:
            print("\n" + "=" * 30)
            print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            print("2. –°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            print("3. –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö")
            print("4. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
            print("5. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–î")
            print("6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            print("7. –í—ã—Ö–æ–¥")
            print("=" * 30)
            
            choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-7): ").strip()
            
            if choice == '1':
                init_database()
            elif choice == '2':
                if input("‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã? (yes/no): ").lower() == 'yes':
                    reset_database()
                else:
                    print("‚ùå –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
            elif choice == '3':
                create_sample_data()
            elif choice == '4':
                backup_database()
            elif choice == '5':
                show_db_info()
            elif choice == '6':
                test_database_connection()
            elif choice == '7':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def print_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    print("""
üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python init_db.py [–∫–æ–º–∞–Ω–¥–∞]

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    init    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    reset   - –°–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ)
    sample  - –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    backup  - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é (—Ç–æ–ª—å–∫–æ SQLite)
    info    - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    test    - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î

üí° –ü—Ä–∏–º–µ—Ä—ã:
    python init_db.py init
    python init_db.py sample
    python init_db.py info
    python init_db.py test

‚öôÔ∏è  –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é.
    """)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: pip install Flask Flask-SQLAlchemy")
        sys.exit(1)